class GraphTraversal {
    constructor() {
        this.adjancyList = {}
        this.length = 0
    }
    addVertex(vertex) {
        if (!this.adjancyList[vertex]) {
            this.adjancyList[vertex] = []
        }
        this.length += 1;
    }
    addEdge(vertex1, vertex2, weight) {
        if (this.adjancyList[vertex1] && this.adjancyList[vertex2]) {
            this.adjancyList[vertex1].push({
                node: vertex2,
                weight
            });
            this.adjancyList[vertex2].push({
                node: vertex1,
                weight
            })
        }
    }

    shortestPath(start, end) {
        if (!start) {
            return;
        }
        const queue = new PriorityQueue();

        const distance = {};
        const previous = {};

        for (let i in this.adjancyList) {
            distance[i] = Infinity;
            previous[i] = null;
            if (i == start) {
                queue.enqueue(i, 0)
            } else {
                queue.enqueue(i, Infinity)
            }
        }
        distance[start] = 0;

        while (queue.values.length) {
            var vt = queue.dequeue().val;

            if (vt == end) {
                let current = previous[end];
                let path = end;

                while (current != null) {
                    path += current;
                    current = previous[current]
                }
                return {
                    distance: distance[end],
                    path: path.split("").reverse()
                };
            }

            if (distance[vt] != Infinity) {
                this.adjancyList[vt].forEach(neighbour=>{
                    let dist = neighbour.weight + distance[vt];
                    if (distance[neighbour.node] > dist) {
                        distance[neighbour.node] = dist;
                        previous[neighbour.node] = vt
                        console.log('h')
                        queue.enqueue(
                            neighbour.node,
                            neighbour.weight
                        )
                    }
                })
            }
        }

    }
}

class PriorityQueue {
    constructor() {
        this.values = [];
    }
    enqueue(val, priority) {
        this.values.push(new Node(val,priority));
        this.bubbleUp();
    }
    dequeue() {
        if (this.values.length) {
            var start = this.values[0];
            var end = this.values.pop();
            this.values[0] = end;
            this.sinkDown();
            return start;
        }
    }
    sinkDown() {
        var idx = 0;
        var node = this.values[idx];
        var length = this.values.length;

        while (true) {
            var swap = null;
            var child1x = Math.floor(idx * 2 + 1);
            var child2x = Math.floor(idx * 2 + 2);

            if (child1x < length && node.priority > this.values[child1x].priority) {
                swap = child1x;
            }
            if (child2x < length) {
                if ((swap == null && (node.priority > this.values[child2x].priority)) || (swap !== null) && (this.values[child1x].priority > this.values[child2x].priority)) {
                    swap = child2x;
                }
            }
            if (swap == null) {
                break
            }
            this.values[idx] = this.values[swap]
            this.values[swap] = node
            idx = swap;

        }

    }
    bubbleUp() {
        var idx = this.values.length - 1;
        var node = this.values[idx];

        while (true) {
            ;var parentIdx = Math.floor(idx / 2);
            var parent = this.values[parentIdx];
            if (parent.priority > node.priority) {
                [this.values[parentIdx],this.values[idx]] = [node, parent];
            } else {
                break;
            }
            idx = parentIdx;
        }
    }
}

class Node {
    constructor(val, priority) {
        this.val = val;
        this.priority = priority;
    }
}

var graph = new GraphTraversal();
graph.addVertex("A");
graph.addVertex("B");
graph.addVertex("C");
graph.addVertex("D");
graph.addVertex("E");
graph.addVertex("F");
graph.addEdge("A", "B", 3);
graph.addEdge("A", "C", 2);
graph.addEdge("B", "E", 2);
graph.addEdge("C", "D", 2);
graph.addEdge("C", "F", 4);
graph.addEdge("D", "E", 3);
graph.addEdge("D", "F", 1);
graph.addEdge("E", "F", 1);
graph.shortestPath("A", "E")

//                  A
//               /    \ 
//              B      F
//              |\    /|
//              C \  / E
//               \ \/ /
//                 D
