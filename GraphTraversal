class GraphTraversal {
    constructor() {
        this.adjancyList = {}
        this.length = 0
    }
    addVertex(vertex) {
        if (!this.adjancyList[vertex]) {
            this.adjancyList[vertex] = []
        }
        this.length += 1;
    }
    removeEdge(vertex1, vertex2) {
        this.adjancyList[vertex1] = this.adjancyList[vertex1].filter(vertex=>vertex != vertex2);
        this.adjancyList[vertex2] = this.adjancyList[vertex2].filter(vertex=>vertex != vertex1);
    }
    addEdge(vertex1, vertex2) {
        if (this.adjancyList[vertex1] && this.adjancyList[vertex2]) {
            this.adjancyList[vertex1].push(vertex2);
            this.adjancyList[vertex2].push(vertex1)
        }
    }
    removeVertex(vertex) {
        while (this.adjancyList[vertex].length) {
            const v1 = this.adjancyList[vertex].pop();
            this.removeEdge(vertex, v1);
        }
        delete this.adjancyList[vertex];
    }
    depthFirstSearchRecurssive(start) {
        if (!start) {
            return;
        }
        const result = []
        const visited = {}

        const helperFn = (strt)=>{

            result.push(strt);
            visited[strt] = true;

            console.log(true)
            this.adjancyList[strt].forEach(neighbour=>{

                if (!visited[neighbour])
                    helperFn(neighbour);
            }
            );

        }
        helperFn(start);
        return result;
    }
    depthFirstSearchIterative(start) {
        if (!start) {
            return;
        }
        const result = []
        const visited = {}
        const queue = [start];
        visited[start] = true;

        while(queue.length){
            var vt = queue.pop();
            result.push(vt);
            
            this.adjancyList[vt].forEach(neighbour => {
                if(!visited[neighbour]){
                    queue.push(neighbour);
                    visited[neighbour] = true;
                }
            }) 
        }
        return result;
    }
    breadthFirstSearch(start) {
        if (!start) {
            return;
        }
        const result = []
        const visited = {}
        const queue = [start];
        visited[start] = true;

        while(queue.length){
            var vt = queue.shift();
            result.push(vt);
            
            this.adjancyList[vt].forEach(neighbour => {
                if(!visited[neighbour]){
                    queue.push(neighbour);
                    visited[neighbour] = true;
                }
            }) 
        }
        return result;
    }
}

var graph = new GraphTraversal();
graph.addVertex("A");
graph.addVertex("B");
graph.addVertex("C");
graph.addVertex("D");
graph.addVertex("E");
graph.addVertex("F");
graph.addEdge("A", "B");
graph.addEdge("B", "C");
graph.addEdge("C", "D");
graph.addEdge("D", "E");
graph.addEdge("E", "F");
graph.addEdge("A", "F");
graph.addEdge("D", "B");
graph.addEdge("D", "F");



//                  A
//               /    \ 
//              B      F
//              |\    /|
//              C \  / E
//               \ \/ /
//                 D
